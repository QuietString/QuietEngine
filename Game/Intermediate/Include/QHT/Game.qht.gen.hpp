// Auto-generated by QHT. Do not edit.
#pragma once
#include <cstddef>
#include <vector>
#include <string>
#include <unordered_map>
#include "qmeta_runtime.h"
using namespace qmeta;
// Unit: Game

#include "Classes/Player.h"
#include "Test/GcPerfTest.h"

static inline Variant _qmeta_invoke_QPlayer_AddHealth(void* obj, const Variant* args, std::size_t) {
    QPlayer* self = static_cast<QPlayer*>(obj);
    int a0 = args[0].as<int>();
    auto _ret = self->AddHealth(a0);
    return Variant(_ret);
}

static inline Variant _qmeta_invoke_QPlayer_SetWalkSpeed(void* obj, const Variant* args, std::size_t) {
    QPlayer* self = static_cast<QPlayer*>(obj);
    float a0 = args[0].as<float>();
    self->SetWalkSpeed(a0);
    return Variant();
}

static inline Variant _qmeta_invoke_QGcPerfTest_PatternChain(void* obj, const Variant* args, std::size_t) {
    QGcPerfTest* self = static_cast<QGcPerfTest*>(obj);
    int a0 = args[0].as<int>();
    int a1 = args[1].as<int>();
    self->PatternChain(a0, a1);
    return Variant();
}

static inline Variant _qmeta_invoke_QGcPerfTest_PatternGrid(void* obj, const Variant* args, std::size_t) {
    QGcPerfTest* self = static_cast<QGcPerfTest*>(obj);
    int a0 = args[0].as<int>();
    int a1 = args[1].as<int>();
    int a2 = args[2].as<int>();
    self->PatternGrid(a0, a1, a2);
    return Variant();
}

static inline Variant _qmeta_invoke_QGcPerfTest_PatternRandom(void* obj, const Variant* args, std::size_t) {
    QGcPerfTest* self = static_cast<QGcPerfTest*>(obj);
    int a0 = args[0].as<int>();
    int a1 = args[1].as<int>();
    int a2 = args[2].as<int>();
    self->PatternRandom(a0, a1, a2);
    return Variant();
}

static inline Variant _qmeta_invoke_QGcPerfTest_PatternRings(void* obj, const Variant* args, std::size_t) {
    QGcPerfTest* self = static_cast<QGcPerfTest*>(obj);
    int a0 = args[0].as<int>();
    int a1 = args[1].as<int>();
    int a2 = args[2].as<int>();
    self->PatternRings(a0, a1, a2);
    return Variant();
}

static inline Variant _qmeta_invoke_QGcPerfTest_PatternDiamond(void* obj, const Variant* args, std::size_t) {
    QGcPerfTest* self = static_cast<QGcPerfTest*>(obj);
    int a0 = args[0].as<int>();
    int a1 = args[1].as<int>();
    int a2 = args[2].as<int>();
    self->PatternDiamond(a0, a1, a2);
    return Variant();
}

static inline Variant _qmeta_invoke_QGcPerfTest_BreakAtDepth(void* obj, const Variant* args, std::size_t) {
    QGcPerfTest* self = static_cast<QGcPerfTest*>(obj);
    int a0 = args[0].as<int>();
    int a1 = args[1].as<int>();
    int a2 = args[2].as<int>();
    auto _ret = self->BreakAtDepth(a0, a1, a2);
    return Variant(_ret);
}

static inline Variant _qmeta_invoke_QGcPerfTest_BreakPercent(void* obj, const Variant* args, std::size_t) {
    QGcPerfTest* self = static_cast<QGcPerfTest*>(obj);
    double a0 = args[0].as<double>();
    int a1 = args[1].as<int>();
    int a2 = args[2].as<int>();
    auto _ret = self->BreakPercent(a0, a1, a2);
    return Variant(_ret);
}

static inline Variant _qmeta_invoke_QGcPerfTest_BreakRandomEdges(void* obj, const Variant* args, std::size_t) {
    QGcPerfTest* self = static_cast<QGcPerfTest*>(obj);
    int a0 = args[0].as<int>();
    int a1 = args[1].as<int>();
    auto _ret = self->BreakRandomEdges(a0, a1);
    return Variant(_ret);
}

static inline Variant _qmeta_invoke_QGcPerfTest_DetachRoots(void* obj, const Variant* args, std::size_t) {
    QGcPerfTest* self = static_cast<QGcPerfTest*>(obj);
    int a0 = args[0].as<int>();
    double a1 = args[1].as<double>();
    auto _ret = self->DetachRoots(a0, a1);
    return Variant(_ret);
}

static inline Variant _qmeta_invoke_QGcPerfTest_PrintDepthStats(void* obj, const Variant* args, std::size_t) {
    QGcPerfTest* self = static_cast<QGcPerfTest*>(obj);
    int a0 = args[0].as<int>();
    self->PrintDepthStats(a0);
    return Variant();
}

static inline Variant _qmeta_invoke_QGcPerfTest_MeasureGc(void* obj, const Variant* args, std::size_t) {
    QGcPerfTest* self = static_cast<QGcPerfTest*>(obj);
    int a0 = args[0].as<int>();
    self->MeasureGc(a0);
    return Variant();
}

static inline Variant _qmeta_invoke_QGcPerfTest_Churn(void* obj, const Variant* args, std::size_t) {
    QGcPerfTest* self = static_cast<QGcPerfTest*>(obj);
    int a0 = args[0].as<int>();
    int a1 = args[1].as<int>();
    double a2 = args[2].as<double>();
    int a3 = args[3].as<int>();
    int a4 = args[4].as<int>();
    self->Churn(a0, a1, a2, a3, a4);
    return Variant();
}

inline void QHT_Register_Game(Registry& R) {
    TypeInfo& T_QPlayer = R.add_type("QPlayer", sizeof(QPlayer));
    T_QPlayer.meta = MetaMap{ std::make_pair(std::string("Module"), std::string("Game")) };
    T_QPlayer.properties.push_back(MetaProperty{"Health", "int", offsetof(QPlayer, Health), MetaMap{} });
    T_QPlayer.properties.push_back(MetaProperty{"WalkSpeed", "float", offsetof(QPlayer, WalkSpeed), MetaMap{} });
    T_QPlayer.properties.push_back(MetaProperty{"Friend", "QPlayer*", offsetof(QPlayer, Friend), MetaMap{} });
    T_QPlayer.properties.push_back(MetaProperty{"Friends", "std::vector<QPlayer*>", offsetof(QPlayer, Friends), MetaMap{} });
    {
        MetaFunction F;
        F.name = "AddHealth";
        F.return_type = "int";
        F.invoker = &_qmeta_invoke_QPlayer_AddHealth;
        F.params = std::vector<MetaParam>{ MetaParam{"Delta", "int"} };
        F.meta = MetaMap{};
        T_QPlayer.functions.push_back(std::move(F));
    }
    {
        MetaFunction F;
        F.name = "SetWalkSpeed";
        F.return_type = "void";
        F.invoker = &_qmeta_invoke_QPlayer_SetWalkSpeed;
        F.params = std::vector<MetaParam>{ MetaParam{"Speed", "float"} };
        F.meta = MetaMap{};
        T_QPlayer.functions.push_back(std::move(F));
    }
    TypeInfo& T_QGcPerfTest = R.add_type("QGcPerfTest", sizeof(QGcPerfTest));
    T_QGcPerfTest.meta = MetaMap{ std::make_pair(std::string("Module"), std::string("Game")) };
    T_QGcPerfTest.properties.push_back(MetaProperty{"Roots", "std::vector<QObject*>", offsetof(QGcPerfTest, Roots), MetaMap{} });
    {
        MetaFunction F;
        F.name = "PatternChain";
        F.return_type = "void";
        F.invoker = &_qmeta_invoke_QGcPerfTest_PatternChain;
        F.params = std::vector<MetaParam>{ MetaParam{"Length", "int"}, MetaParam{"Seed", "int"} };
        F.meta = MetaMap{};
        T_QGcPerfTest.functions.push_back(std::move(F));
    }
    {
        MetaFunction F;
        F.name = "PatternGrid";
        F.return_type = "void";
        F.invoker = &_qmeta_invoke_QGcPerfTest_PatternGrid;
        F.params = std::vector<MetaParam>{ MetaParam{"Width", "int"}, MetaParam{"Height", "int"}, MetaParam{"Seed", "int"} };
        F.meta = MetaMap{};
        T_QGcPerfTest.functions.push_back(std::move(F));
    }
    {
        MetaFunction F;
        F.name = "PatternRandom";
        F.return_type = "void";
        F.invoker = &_qmeta_invoke_QGcPerfTest_PatternRandom;
        F.params = std::vector<MetaParam>{ MetaParam{"Nodes", "int"}, MetaParam{"AvgOut", "int"}, MetaParam{"Seed", "int"} };
        F.meta = MetaMap{};
        T_QGcPerfTest.functions.push_back(std::move(F));
    }
    {
        MetaFunction F;
        F.name = "PatternRings";
        F.return_type = "void";
        F.invoker = &_qmeta_invoke_QGcPerfTest_PatternRings;
        F.params = std::vector<MetaParam>{ MetaParam{"Rings", "int"}, MetaParam{"RingSize", "int"}, MetaParam{"Seed", "int"} };
        F.meta = MetaMap{};
        T_QGcPerfTest.functions.push_back(std::move(F));
    }
    {
        MetaFunction F;
        F.name = "PatternDiamond";
        F.return_type = "void";
        F.invoker = &_qmeta_invoke_QGcPerfTest_PatternDiamond;
        F.params = std::vector<MetaParam>{ MetaParam{"Layers", "int"}, MetaParam{"Breadth", "int"}, MetaParam{"Seed", "int"} };
        F.meta = MetaMap{};
        T_QGcPerfTest.functions.push_back(std::move(F));
    }
    {
        MetaFunction F;
        F.name = "BreakAtDepth";
        F.return_type = "int";
        F.invoker = &_qmeta_invoke_QGcPerfTest_BreakAtDepth;
        F.params = std::vector<MetaParam>{ MetaParam{"TargetDepth", "int"}, MetaParam{"Count", "int"}, MetaParam{"Seed", "int"} };
        F.meta = MetaMap{};
        T_QGcPerfTest.functions.push_back(std::move(F));
    }
    {
        MetaFunction F;
        F.name = "BreakPercent";
        F.return_type = "int";
        F.invoker = &_qmeta_invoke_QGcPerfTest_BreakPercent;
        F.params = std::vector<MetaParam>{ MetaParam{"Percent", "double"}, MetaParam{"Depth", "int"}, MetaParam{"Seed", "int"} };
        F.meta = MetaMap{};
        T_QGcPerfTest.functions.push_back(std::move(F));
    }
    {
        MetaFunction F;
        F.name = "BreakRandomEdges";
        F.return_type = "int";
        F.invoker = &_qmeta_invoke_QGcPerfTest_BreakRandomEdges;
        F.params = std::vector<MetaParam>{ MetaParam{"EdgeCount", "int"}, MetaParam{"Seed", "int"} };
        F.meta = MetaMap{};
        T_QGcPerfTest.functions.push_back(std::move(F));
    }
    {
        MetaFunction F;
        F.name = "DetachRoots";
        F.return_type = "int";
        F.invoker = &_qmeta_invoke_QGcPerfTest_DetachRoots;
        F.params = std::vector<MetaParam>{ MetaParam{"Count", "int"}, MetaParam{"Percentage", "double"} };
        F.meta = MetaMap{};
        T_QGcPerfTest.functions.push_back(std::move(F));
    }
    {
        MetaFunction F;
        F.name = "PrintDepthStats";
        F.return_type = "void";
        F.invoker = &_qmeta_invoke_QGcPerfTest_PrintDepthStats;
        F.params = std::vector<MetaParam>{ MetaParam{"TargetDepth", "int"} };
        F.meta = MetaMap{};
        T_QGcPerfTest.functions.push_back(std::move(F));
    }
    {
        MetaFunction F;
        F.name = "MeasureGc";
        F.return_type = "void";
        F.invoker = &_qmeta_invoke_QGcPerfTest_MeasureGc;
        F.params = std::vector<MetaParam>{ MetaParam{"Repeats", "int"} };
        F.meta = MetaMap{};
        T_QGcPerfTest.functions.push_back(std::move(F));
    }
    {
        MetaFunction F;
        F.name = "Churn";
        F.return_type = "void";
        F.invoker = &_qmeta_invoke_QGcPerfTest_Churn;
        F.params = std::vector<MetaParam>{ MetaParam{"Steps", "int"}, MetaParam{"AllocPerStep", "int"}, MetaParam{"BreakPct", "double"}, MetaParam{"GcEveryN", "int"}, MetaParam{"Seed", "int"} };
        F.meta = MetaMap{};
        T_QGcPerfTest.functions.push_back(std::move(F));
    }
}
