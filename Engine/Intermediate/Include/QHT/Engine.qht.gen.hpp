// Auto-generated by QHT. Do not edit.
#pragma once
#include <cstddef>
#include <vector>
#include <string>
#include <unordered_map>
#include "qmeta_runtime.h"
using namespace qmeta;
// Unit: Engine

#include "CoreObjects/Public/World.h"
#include "Public/TestObject.h"

static inline Variant _qmeta_invoke_QTestObject_SetInteger(void* obj, const Variant* args, std::size_t) {
    QTestObject* self = static_cast<QTestObject*>(obj);
    int a0 = args[0].as<int>();
    self->SetInteger(a0);
    return Variant();
}

static inline Variant _qmeta_invoke_QTestObject_RemoveChildren(void* obj, const Variant* args, std::size_t) {
    QTestObject* self = static_cast<QTestObject*>(obj);
    self->RemoveChildren();
    return Variant();
}

static inline Variant _qmeta_invoke_QWorld_AddObject(void* obj, const Variant* args, std::size_t) {
    QWorld* self = static_cast<QWorld*>(obj);
    QObject* a0 = args[0].as<QObject*>();
    self->AddObject(a0);
    return Variant();
}

inline void QHT_Register_Engine(Registry& R) {
    TypeInfo& T_QTestObject = R.add_type("QTestObject", sizeof(QTestObject));
    T_QTestObject.meta = MetaMap{ std::make_pair(std::string("Module"), std::string("Engine")) };
    T_QTestObject.properties.push_back(MetaProperty{"Integer", "int", offsetof(QTestObject, Integer), MetaMap{} });
    T_QTestObject.properties.push_back(MetaProperty{"Children", "std::vector<QTestObject*>", offsetof(QTestObject, Children), MetaMap{} });
    {
        MetaFunction F;
        F.name = "SetInteger";
        F.return_type = "void";
        F.invoker = &_qmeta_invoke_QTestObject_SetInteger;
        F.params = std::vector<MetaParam>{ MetaParam{"InValue", "int"} };
        F.meta = MetaMap{};
        T_QTestObject.functions.push_back(std::move(F));
    }
    {
        MetaFunction F;
        F.name = "RemoveChildren";
        F.return_type = "void";
        F.invoker = &_qmeta_invoke_QTestObject_RemoveChildren;
        F.params = std::vector<MetaParam>{  };
        F.meta = MetaMap{};
        T_QTestObject.functions.push_back(std::move(F));
    }
    TypeInfo& T_QWorld = R.add_type("QWorld", sizeof(QWorld));
    T_QWorld.meta = MetaMap{ std::make_pair(std::string("Module"), std::string("Engine")) };
    T_QWorld.properties.push_back(MetaProperty{"Objects", "std::vector<QObject*>", offsetof(QWorld, Objects), MetaMap{} });
    {
        MetaFunction F;
        F.name = "AddObject";
        F.return_type = "void";
        F.invoker = &_qmeta_invoke_QWorld_AddObject;
        F.params = std::vector<MetaParam>{ MetaParam{"Obj", "QObject*"} };
        F.meta = MetaMap{};
        T_QWorld.functions.push_back(std::move(F));
    }
}
