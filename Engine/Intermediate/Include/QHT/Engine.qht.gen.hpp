// Auto-generated by QHT. Do not edit.
#pragma once
#include <cstddef>
#include <vector>
#include <string>
#include <unordered_map>
#include "qmeta_runtime.h"
using namespace qmeta;
// Unit: Engine

#include "CoreObjects/Public/World.h"
#include "Public/Object_GcTest.h"

inline void QHT_Register_Engine(Registry& R) {
    TypeInfo& T_QObject_GcTest = R.add_type("QObject_GcTest", sizeof(QObject_GcTest));
    T_QObject_GcTest.meta = MetaMap{ std::make_pair(std::string("Module"), std::string("Engine")) };
    T_QObject_GcTest.properties.push_back(MetaProperty{"ChildObject", "QObject*", offsetof(QObject_GcTest, ChildObject), MetaMap{} });
    TypeInfo& T_QWorld = R.add_type("QWorld", sizeof(QWorld));
    T_QWorld.meta = MetaMap{ std::make_pair(std::string("Module"), std::string("Engine")) };
    T_QWorld.properties.push_back(MetaProperty{"SingleObject", "QObject*", offsetof(QWorld, SingleObject), MetaMap{} });
    T_QWorld.properties.push_back(MetaProperty{"SingleObject2", "QObject*", offsetof(QWorld, SingleObject2), MetaMap{} });
    T_QWorld.properties.push_back(MetaProperty{"Objects", "std::vector<QObject*>", offsetof(QWorld, Objects), MetaMap{} });
}
