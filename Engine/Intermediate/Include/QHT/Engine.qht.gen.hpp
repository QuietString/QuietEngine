// Auto-generated by QHT. Do not edit.
#pragma once
#include <cstddef>
#include <vector>
#include <string>
#include <unordered_map>
#include "qmeta_runtime.h"
using namespace qmeta;
// Unit: Engine

#include "CoreObjects/Public/World.h"
#include "Public/Controller.h"
#include "Public/Object_GcTest.h"

static inline Variant _qmeta_invoke_Controller_SetControllerID(void* obj, const Variant* args, std::size_t) {
    Controller* self = static_cast<Controller*>(obj);
    int a0 = args[0].as<int>();
    self->SetControllerID(a0);
    return Variant();
}

inline void QHT_Register_Engine(Registry& R) {
    TypeInfo& T_Controller = R.add_type("Controller", sizeof(Controller));
    T_Controller.meta = MetaMap{ std::make_pair(std::string("Module"), std::string("Engine")) };
    T_Controller.properties.push_back(MetaProperty{"ControllerID", "int", offsetof(Controller, ControllerID), MetaMap{} });
    {
        MetaFunction F;
        F.name = "SetControllerID";
        F.return_type = "void";
        F.invoker = &_qmeta_invoke_Controller_SetControllerID;
        F.params = std::vector<MetaParam>{ MetaParam{"ID", "int"} };
        F.meta = MetaMap{};
        T_Controller.functions.push_back(std::move(F));
    }
    TypeInfo& T_QObject_GcTest = R.add_type("QObject_GcTest", sizeof(QObject_GcTest));
    T_QObject_GcTest.meta = MetaMap{ std::make_pair(std::string("Module"), std::string("Engine")) };
    T_QObject_GcTest.properties.push_back(MetaProperty{"ChildObject", "QObject*", offsetof(QObject_GcTest, ChildObject), MetaMap{} });
    TypeInfo& T_QWorld = R.add_type("QWorld", sizeof(QWorld));
    T_QWorld.meta = MetaMap{ std::make_pair(std::string("Module"), std::string("Engine")) };
    T_QWorld.properties.push_back(MetaProperty{"SingleObject", "QObject*", offsetof(QWorld, SingleObject), MetaMap{} });
    T_QWorld.properties.push_back(MetaProperty{"SingleObject2", "QObject*", offsetof(QWorld, SingleObject2), MetaMap{} });
}
